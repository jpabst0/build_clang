cmake_minimum_required (VERSION 3.20)

project(clang_superbuild LANGUAGES)

include(ExternalProject)

set(INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install)

set(COMMON_CMAKE_CACHE_ARGS
	-DCMAKE_BUILD_TYPE:STRING=Release
	-DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PREFIX}
	-DCMAKE_LIBRARY_PATH:PATH=${INSTALL_PREFIX}/lib
	#-DCMAKE_SKIP_INSTALL_RPATH:BOOL=ON
	#"-DCMAKE_C_FLAGS:STRING=-O2 -fexceptions -funwind-tables"
	#"-DCMAKE_CXX_FLAGS:STRING=-O2 -fexceptions -funwind-tables"
	#-DCMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH:BOOL=OFF
	#-DCMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH:BOOL=OFF
)

ExternalProject_Add(
	ZLIB
	GIT_REPOSITORY https://github.com/madler/zlib.git
	GIT_TAG v1.3.1
	CMAKE_CACHE_ARGS
		${COMMON_CMAKE_CACHE_ARGS}
)

ExternalProject_Add(
	CLANG
	GIT_REPOSITORY https://github.com/llvm/llvm-project.git
	#GIT_TAG b1234ddbe2652aa7948242a57107ca7ab12fd2f8
	GIT_TAG llvmorg-19.1.3
	SOURCE_SUBDIR llvm
	CMAKE_CACHE_ARGS
		${COMMON_CMAKE_CACHE_ARGS}
		-DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON
		-DLLVM_DEFAULT_TARGET_TRIPLE:STRING=arm-linux-gnueabihf
		-DLLVM_ENABLE_PROJECTS:STRING=clang lld # lldb
		-DLLVM_TARGETS_TO_BUILD:STRING=ARM
		-DLLVM_ENABLE_RUNTIMES:STRING=libcxx libcxxabi libunwind
		#-DCMAKE_CXX_FLAGS:STRING=-O3 -fno-pic
		#-DCMAKE_C_FLAGS:STRING=-O3 -fno-pic
		#-DLLVM_ENABLE_RUNTIMES:STRING=
		#-DLLVM_RUNTIME_TARGETS:STRING=arm-linux-gnueabihf
		-DBUILD_SHARED_LIBS:BOOL=OFF
		#-DCLANG_DEFAULT_CXX_STDLIB = libc++
		#-DLLVM_ENABLE_LIBCXX:BOOL=OFF
		#-DLIBCXX_ENABLE_STATIC:BOOL=ON
		#-DLIBCXX_ENABLE_SHARED:BOOL=OFF
		#-DBUILD_SHARED_LIBS=OFF
		#-DCLANG_DEFAULT_RTLIB = compiler-rt
		#-DLIBUNWIND_ENABLE_SHARED:BOOL=OFF
		#-G Ninja 
		#-DCMAKE_INSTALL_PREFIX=$PATH_CLANG 
	DEPENDS
		ZLIB
		
)
